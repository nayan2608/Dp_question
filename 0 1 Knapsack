// memoization  Tc - O(n*maxWeight)   Sc - O(n*maxWeight)

int go(int i,int W,vector<int>&weight,vector<int>&value,vector<vector<int>>&dp){
    if(i==0){
        if(weight[0]<=W){
            return value[0];
        }
        return 0;
    }
    if(dp[i][W]!=-1){
        return dp[i][W];
    }
    int nottake=go(i-1,W,weight,value,dp);
    int take=INT_MIN;
    if(weight[i]<=W){
        take=value[i]+go(i-1,W-weight[i],weight,value,dp);
    }
    
    return dp[i][W]=max(take,nottake);
}
int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
    vector<vector<int>>dp(n,vector<int>(maxWeight+1,-1));
    return go(n-1,maxWeight,weight,value,dp);
}

// Tabulation  Tc - O(n*maxWeight)   Sc - O(n*maxWeight)

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
    vector<vector<int>>dp(n,vector<int>(maxWeight+1,0));
    
    for(int W=weight[0];W<=maxWeight;W++){
        dp[0][W]=value[0];
    }
    
    for(int i=1;i<n;i++){
        for(int W=0;W<=maxWeight;W++){
            int nottake=dp[i-1][W];
            int take=INT_MIN;
            if(weight[i]<=W){
                take=value[i]+dp[i-1][W-weight[i]];
            }
            dp[i][W]=max(take,nottake);
        }
    }
    
    return dp[n-1][maxWeight];
}

// Space Optimazation Tc - O(n*maxWeight)  Sc - O(maxWeight)

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) 
{
    vector<int>dp(maxWeight+1,0);
    
    for(int W=weight[0];W<=maxWeight;W++){
        dp[W]=value[0];
    }
    
    for(int i=1;i<n;i++){
        for(int W=maxWeight;W>=0;W--){
            int nottake=dp[W];
            int take=INT_MIN;
            if(weight[i]<=W){
                take=value[i]+dp[W-weight[i]];
            }
            dp[W]=max(take,nottake);
        }
    }
    
    return dp[maxWeight];
}
