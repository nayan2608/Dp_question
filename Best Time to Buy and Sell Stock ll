// memoization  Tc - O(n*2)  Sc - O(n*2)

#include<bits/stdc++.h>
long go(int i,int buy,int n,long *values,vector<vector<long>>&dp){
    if(i==n)return 0;
    
    if(dp[i][buy]!=-1){
        return dp[i][buy];
    }
    long profit=0;
    if(buy){            profit=max(-values[i]+go(i+1,0,n,values,dp),go(i+1,1,n,values,dp));
    }
    else{
        profit=max(values[i]+go(i+1,1,n,values,dp),go(i+1,0,n,values,dp));
    }
    return dp[i][buy]=profit;
}
long getMaximumProfit(long *values, int n)
{
    vector<vector<long>>dp(n,vector<long>(2,-1));
    return go(0,1,n,values,dp);
}


// Tabulation Tc - O(n*2)  Sc - O(n*2)

long getMaximumProfit(long *values, int n)
{
    if(n==0)return 0;
    vector<vector<long>>dp(n+1,vector<long>(2,0));
    
    dp[n][0]=dp[n][1]=0;
    int i,buy;
    
    for(i=n-1;i>=0;i--){
        for(buy=0;buy<=1;buy++){
             long profit=0;
             if(buy){ 
                 profit=max(-values[i]+dp[i+1][0],dp[i+1][1]);
             }
             else{
                 profit=max(values[i]+dp[i+1][1],dp[i+1][0]);
             }
             dp[i][buy]=profit;
        }
    }
    return dp[0][1];
}

// Space Optimazation  Tc - O(n*2)  Sc - O(1)
long getMaximumProfit(long *values, int n)
{
    if(n==0)return 0;
    vector<long>ahead(2,0),curr(2,0);
    ahead[0]=ahead[1]=0;
    int i,buy;
    
    for(i=n-1;i>=0;i--){
        for(buy=0;buy<=1;buy++){
             long profit=0;
             if(buy){ 
                 profit=max(-values[i]+ahead[0],ahead[1]);
             }
             else{
                 profit=max(values[i]+ahead[1],ahead[0]);
             }
             curr[buy]=profit;
        }
        ahead=curr;
    }
    return ahead[1];
}


// Space Optimazation Ic - O(n)  Sc - O(1)

long getMaximumProfit(long *values, int n)
{
    if(n==0)return 0;
    
    long aheadbuy,aheadnotbuy,currbuy,currnotbuy;
    aheadnotbuy=aheadbuy=0;
    
    for(int i=n-1;i>=0;i--){
        currbuy=max(-values[i]+aheadnotbuy,aheadbuy);
        currnotbuy=max(values[i]+aheadbuy,aheadnotbuy);
        aheadbuy=currbuy;
        aheadnotbuy=currnotbuy;
    }
    return aheadbuy;
}
