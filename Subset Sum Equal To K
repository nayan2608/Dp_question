// memoization Tc - O(n*k)  Sc - O(n*k)

bool go(int i,int k,vector<int>&arr,vector<vector<int>>&dp){
    if(k==0)return true;
    if(i==0) return arr[0]==k;
    if(dp[i][k]!=-1) return dp[i][k];
    bool nottake=go(i-1,k,arr,dp);
    bool take=false;
    if(arr[i]<=k){
        take=go(i-1,k-arr[i],arr,dp);
    }
    
    return dp[i][k]= (take | nottake);
}
bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<int>>dp(n,vector<int>(k+1,-1));
    return go(n-1,k,arr,dp);
}

// tabulation Tc - O(n*k)  Sc - O(n*k)

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<bool>>dp(n,vector<bool>(k+1,0));
    int i,target;
    
    for(i=0;i<n;i++){
        dp[i][0]=true;
    }
    dp[0][arr[0]]=true;
    for(i=1;i<n;i++){
        for(target=1;target<=k;target++){
            bool nottake=dp[i-1][target];
            bool take=false;
            if(arr[i]<=target){
                take=dp[i-1][target-arr[i]];
            }
            dp[i][target]=(take | nottake);
        }
    }
    return dp[n-1][k];
}

// Space optimazation Tc - O(n*k)  Sc - O(k)

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<bool>prev(k+1,0),curr(k+1,0);
    int i,target;
    prev[0]=curr[0]=true;
    prev[arr[0]]=true;
    for(i=1;i<n;i++){
        for(target=1;target<=k;target++){
            bool nottake=prev[target];
            bool take=false;
            if(arr[i]<=target){
                take=prev[target-arr[i]];
            }
            curr[target]=(take | nottake);
        }
        prev=curr;
    }
    return prev[k];
}
