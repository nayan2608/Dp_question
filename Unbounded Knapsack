// memoization  Tc - O(n*w)  Sc - O(n*w)

#include<bits/stdc++.h>
int go(int i,int w,vector<int>&profit,vector<int>&weight,vector<vector<int>>&dp){
    if(i==0){
        return (w/weight[0])*profit[0];
    }
    if(dp[i][w]!=-1){
        return dp[i][w];
    }
    int nottake=go(i-1,w,profit,weight,dp);
    int take=INT_MIN;
    if(weight[i]<=w){
        take=profit[i]+go(i,w-weight[i],profit,weight,dp);
    }
    return dp[i][w]=max(take,nottake);
}
int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
   vector<vector<int>>dp(n,vector<int>(w+1,-1));
   return go(n-1,w,profit,weight,dp);
}


// Tabulation  Tc - O(n*w)  Sc - O(n*w)

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
   vector<vector<int>>dp(n,vector<int>(w+1,0));
   
    for(int W=0;W<=w;W++){
        dp[0][W]=(W/weight[0])*profit[0];
    }
    
    for(int i=1;i<n;i++){
        for(int W=0;W<=w;W++){
            int nottake=dp[i-1][W];
            int take=0;
            if(weight[i]<=W){
                take=profit[i]+dp[i][W-weight[i]];
            }
            dp[i][W]=max(take,nottake);
        }
    }
    return dp[n-1][w];
}


// Space Optimazation   Tc - O(n*w)  Sc - O(w)

int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
   vector<int>dp(w+1,0);
   
    for(int W=0;W<=w;W++){
        dp[W]=(W/weight[0])*profit[0];
    }
    
    for(int i=1;i<n;i++){
        for(int W=0;W<=w;W++){
            int nottake=dp[W];
            int take=0;
            if(weight[i]<=W){
                take=profit[i]+dp[W-weight[i]];
            }
            dp[W]=max(take,nottake);
        }
    }
    return dp[w];
}
