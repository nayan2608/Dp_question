// memoization  Tc - O(n*m)  Sc - O(n*m)

#include<bits/stdc++.h>
int go(int i,int j,string s1,string s2,vector<vector<int>>&dp){
    if(i<0) return j+1;
    if(j<0) return i+1;
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    if(s1[i]==s2[j]){
        return dp[i][j]=go(i-1,j-1,s1,s2,dp);
    }
    else{
        return dp[i][j]=1+min({go(i,j-1,s1,s2,dp),go(i-1,j,s1,s2,dp),go(i-1,j-1,s1,s2,dp)});
    }
}
int editDistance(string str1, string str2)
{
    int n=str1.length(),m=str2.length();
    vector<vector<int>>dp(n,vector<int>(m,-1));
    return go(n-1,m-1,str1,str2,dp);
}

// Tabulation  Tc - O(n*m)  Sc - O(n*m)

int editDistance(string str1, string str2)
{
    int n=str1.length(),m=str2.length(),i,j;
    vector<vector<int>>dp(n+1,vector<int>(m+1,0));
    
    for(i=0;i<=n;i++){
        dp[i][0]=i;
    }
    for(j=0;j<=m;j++){
        dp[0][j]=j;
    }
    
    for(i=1;i<=n;i++){
        for(j=1;j<=m;j++){
            if(str1[i-1]==str2[j-1]){
               dp[i][j]=dp[i-1][j-1];
            }
            else{
               dp[i][j]=1+min({dp[i][j-1],dp[i-1][j],dp[i-1][j-1]});
            }
        }
    }
    return dp[n][m];
}

// Space Optimazation  Tc - O(n*m)  Sc - O(m)  

int editDistance(string str1, string str2)
{
    int n=str1.length(),m=str2.length(),i,j;
    vector<int>curr(m+1,0),prev(m+1,0);
    
    for(j=0;j<=m;j++){
        prev[j]=j;
    }
    
    for(i=1;i<=n;i++){
        curr[0]=i;
        for(j=1;j<=m;j++){
            if(str1[i-1]==str2[j-1]){
               curr[j]=prev[j-1];
            }
            else{
               curr[j]=1+min({curr[j-1],prev[j],prev[j-1]});
            }
        }
        prev=curr;
    }
    return prev[m];
}
