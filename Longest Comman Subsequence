// memoization   Tc - O(n*m)   Sc - O(n*m)

#include<bits/stdc++.h>
int go(int i,int j,string &s,string &t,vector<vector<int>>&dp){
    if(i<0 || j<0)return 0;
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    if(s[i]==t[j]){
        return dp[i][j]=1+go(i-1,j-1,s,t,dp);
    }
    return dp[i][j]=max(go(i-1,j,s,t,dp),go(i,j-1,s,t,dp));
}
int lcs(string s, string t)
{
	int n=s.length();
    int m=t.length();
    vector<vector<int>>dp(n,vector<int>(m,-1));
    return go(n-1,m-1,s,t,dp);
}

// Tabulation  Tc - O(n*m)   Sc - O(n*m)

int lcs(string s, string t)
{
	int n=s.length();
    int m=t.length(),i,j;
    vector<vector<int>>dp(n+1,vector<int>(m+1,0));
    
    for(i=0;i<=n;i++){
        for(j=0;j<=m;j++){
            if(i==0 || j==0)dp[i][j]=0;
            else if(s[i-1]==t[j-1]){
                dp[i][j]=1+dp[i-1][j-1];
            }
            else{
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
    }
    return dp[n][m];  
}
 
// Space optimazation  Tc - O(n*m)   Sc - O(m)

int lcs(string s, string t)
{
	int n=s.length();
    int m=t.length(),i,j;
    vector<int>curr(m+1,0);
    vector<int>prev(m+1,0);
    
    for(i=1;i<=n;i++){
        for(j=1;j<=m;j++){
            if(s[i-1]==t[j-1]){
                curr[j]=1+prev[j-1];
            }
            else{
                curr[j]=max(prev[j],curr[j-1]);
            }
        }
        prev=curr;
    }
    return curr[m];  
}
